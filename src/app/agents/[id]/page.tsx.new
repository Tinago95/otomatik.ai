"use client";

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import type { SubmitHandler } from 'react-hook-form';
import type { AgentDetailData, Voice, Credential } from '@/app/types';
import AgentForm from '@/components/forms/agents/AgentForm';

// Mock Voices (replace with actual fetch)
const availableVoices: Voice[] = [
  { id: 'voice1', name: 'Rachel', description: 'Professional female voice' },
  { id: 'voice2', name: 'Michael', description: 'Professional male voice' },
  { id: 'voice3', name: 'Sarah', description: 'Friendly female voice' },
];

// Mock Credentials (replace with actual fetch)
const availableCredentials: Credential[] = [
  { id: 'cred1', name: 'OpenAI API Key', type: 'api_key', description: 'Used for agent completions and embeddings', createdAt: '2025-03-15T10:00:00Z' },
  { id: 'cred2', name: 'CRM API Token', type: 'bearer_token', description: 'For customer data lookup', createdAt: '2025-03-20T14:30:00Z' },
  { id: 'cred3', name: 'Database Credentials', type: 'basic_auth', description: 'Read-only access to analytics database', createdAt: '2025-03-25T11:15:00Z' },
];

// Mock agent data (replace with actual API call)
const mockAgentData: Record<string, AgentDetailData> = {
  'agent123': {
    id: 'agent123',
    name: 'Customer Support Agent',
    description: 'Handles customer inquiries and support tickets',
    status: 'active',
    prompt: 'You are a helpful customer support agent. Be friendly and professional.',
    voiceId: 'voice1',
    selectedVoiceName: 'Rachel',
    knowledgeBaseIds: [],
    toolCredentialIds: ['cred2'],
    apiEndpoint: 'https://api.example.com/crm',
    createdAt: '2025-03-10T09:00:00Z',
    updatedAt: '2025-03-12T14:30:00Z'
  },
  'agent456': {
    id: 'agent456',
    name: 'Sales Assistant',
    description: 'Helps with product recommendations and sales inquiries',
    status: 'draft',
    prompt: 'You are a sales assistant. Help customers find the right products.',
    voiceId: 'voice2',
    selectedVoiceName: 'Michael',
    knowledgeBaseIds: [],
    toolCredentialIds: [],
    createdAt: '2025-03-15T11:00:00Z',
    updatedAt: '2025-03-15T11:00:00Z'
  }
};

export default function AgentPage({ params }: { params: { id: string } }) {
  const router = useRouter();
  const agentId = params.id;
  
  const [agentData, setAgentData] = useState<AgentDetailData | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [isSaving, setIsSaving] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  // Fetch agent data
  useEffect(() => {
    const fetchAgentData = async () => {
      setIsLoading(true);
      setError(null);
      
      try {
        // Simulate API call
        await new Promise(resolve => setTimeout(resolve, 500));
        
        // Check if agent exists in mock data
        if (mockAgentData[agentId]) {
          setAgentData(mockAgentData[agentId]);
        } else {
          setError(`Agent with ID ${agentId} not found`);
        }
      } catch (err) {
        console.error("Error fetching agent:", err);
        setError("Failed to load agent data. Please try again.");
      } finally {
        setIsLoading(false);
      }
    };
    
    fetchAgentData();
  }, [agentId]);

  const handleSubmit: SubmitHandler<Partial<AgentDetailData>> = async (data) => {
    setIsSaving(true);
    setError(null);
    
    try {
      console.log("Updating agent:", data);
      
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Update local state with the updated data
      setAgentData(prev => prev ? { ...prev, ...data } : null);
      
      console.log("Agent updated successfully");
    } catch (err) {
      console.error("Error updating agent:", err);
      setError("Failed to update agent. Please try again.");
    } finally {
      setIsSaving(false);
    }
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-500"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg" role="alert">
        <strong className="font-bold mr-2">Error:</strong>
        <span className="block sm:inline">{error}</span>
        <div className="mt-4">
          <button
            onClick={() => router.push('/agents')}
            className="px-4 py-2 bg-red-600 text-white rounded-md text-sm font-medium hover:bg-red-700"
          >
            Back to Agents
          </button>
        </div>
      </div>
    );
  }

  if (!agentData) {
    return (
      <div className="text-center py-12">
        <h2 className="text-xl font-semibold text-gray-800">Agent not found</h2>
        <p className="text-gray-600 mt-2">The agent you're looking for doesn't exist or has been deleted.</p>
        <button
          onClick={() => router.push('/agents')}
          className="mt-4 px-4 py-2 bg-indigo-600 text-white rounded-md text-sm font-medium hover:bg-indigo-700"
        >
          Back to Agents
        </button>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-8">
      {error && (
        <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg mb-6" role="alert">
          <strong className="font-bold mr-2">Error:</strong>
          <span className="block sm:inline">{error}</span>
        </div>
      )}
      
      <AgentForm
        onSubmit={handleSubmit}
        defaultValues={agentData}
        isLoading={isSaving}
        availableVoices={availableVoices}
        availableCredentials={availableCredentials}
        isNewAgent={false}
      />
    </div>
  );
}
